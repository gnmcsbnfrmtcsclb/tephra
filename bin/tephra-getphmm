#!perl

## NB: This is used internally by Tephra, do not use it directly

use 5.014;
use strict; 
use warnings;
use Bio::SearchIO;
use File::Spec;
use File::Basename      qw(dirname fileparse basename);
use File::Temp          qw(tempfile);
use List::Util          qw(min);
use File::Copy          qw(copy);
use IPC::System::Simple qw(system);
use Capture::Tiny       qw(capture);
use Cwd                 qw(abs_path);
use Try::Tiny;
use Getopt::Long;
use Tephra::Config::Exe;
use Carp 'croak';

my $usage = "USAGE: ".basename($0)." -s seq.fas --hmmfile file.hmm -o outdir";
my $seq; 
my $phmm_file;
my $out_dir;
my $verbose = 0; # This is strictly for debugging and must be set manually

GetOptions(
    'seq=s'     => \$seq,
    'hmmfile=s' => \$phmm_file,
    'odir=s'    => \$out_dir,
);

if (!$seq || !$phmm_file || !$out_dir) {
    say "\n[ERROR]: Missing arguments. Check command line. Exiting.\n";
    say $usage;
    exit(1);
}

my ($seqfh, $seq_file) = tempfile( TEMPLATE => 'nucleotide_orfs_XXXX', DIR => abs_path($out_dir), SUFFIX => '.fas', UNLINK => 0 );
my ($pepfh, $pep_file) = tempfile( TEMPLATE => 'translated_orfs_XXXX', DIR => abs_path($out_dir), SUFFIX => '.faa', UNLINK => 0 );

say $seqfh $seq;
close $seqfh;

my $config = Tephra::Config::Exe->new->get_config_paths;
my ($hmmbin, $transeq) = @{$config}{qw(hmmer2bin transeq)};
my $hmmsearch = File::Spec->catfile($hmmbin, 'hmmsearch');

# Get the strand to search from the directory name
my ($name, $path, $suffix) = fileparse($seq_file, qr/\.[^.]*/);
my $dirname = dirname($seq_file);
#my $frame = $dirname =~ /_b$/ ? 'R' : 'F';

try {
    system($transeq, '-frame', 'F', $seq_file, '-outseq', $pep_file, '-trim', 'yes', '-auto');
}
catch {
    say STDERR "\n[ERROR]: 'transeq' failed in tephra-getphmm. Here is the exception: $_\n";
    exit;
};

# This is to gracefully handle sequences that were not translated correctly,
# which typically happens in sequences with long gaps. 
my $has_seq = check_seqlength($pep_file);

if ($has_seq) { 
    my ($hmm_out, $hmm_err, $hmm_exit) = capture { system($hmmsearch, $phmm_file, $pep_file) };

    if ($hmm_err || $hmm_exit) { # log errors if something went wrong
	say STDERR "\n[ERROR]: 'hmmsearch' failed in tephra-getphmm. This is the exit code: ", join q{ }, $hmm_exit;
	say STDERR "\n[ERROR]: 'hmmsearch' failed in tephra-getphmm. This is the command: ", join q{ }, $hmmsearch, $phmm_file, $pep_file;
	say STDERR "\n[ERROR]: 'hmmsearch' failed in tephra-getphmm. This is the STDERR message: ", join q{ }, $hmm_err;
	unlink $seq_file, $pep_file;
	exit(1);
    }

    parse_hmmsearch($hmm_out, $pep_file);
}
elsif (!$has_seq && $verbose) {
    say STDERR "\n[ERROR] 'transeq' failed in tephra-getphmm. This is the command: ", 
        join q{ }, ($transeq, '-frame', 'F', $seq_file, '-outseq', $pep_file, '-trim', 'yes', '-auto');
}
unlink $seq_file, $pep_file;

exit;
#
# methods
#
sub parse_hmmsearch {
    my ($hmm_out, $pep_file) = @_;

    my ($name, $path, $suffix) = fileparse($pep_file, qr/\.[^.]*/);
    my $hmmout = File::Spec->catfile($path, $name.'_hmmsearch.txt');
    open my $o, '>', $hmmout or die "\n[ERROR]: Could not open file: $hmmout\n";
    print $o $hmm_out;
    close $o;

    my $hmmer_in = Bio::SearchIO->new(-file => $hmmout, -format => 'hmmer');

    my @evalues;
    while ( my $result = $hmmer_in->next_result ) {    
        while ( my $hit = $result->next_hit ) {
            my $score  = $hit->raw_score;
            my $signif = $hit->significance;
            while ( my $hsp = $hit->next_hsp ) {
                my $e_val = $hsp->evalue;
                push @evalues, $e_val;
            }
        }
    }
    my $best_hit = min(@evalues);
    print $best_hit;
    unlink $hmmout;

    return;
}

sub check_seqlength {
    my ($seq_file) = @_;

    open my $fh, '<', $seq_file or die "\n[ERROR]: Could not open file: $seq_file\n";

    my $has_seq = 1;

    {    
	local $/ = "\n>";

	while (my $entry = $fh->getline) { 
	    chomp $entry;

	    my ($id, $seq) = split /\n/, $entry, 2;
	    defined $id && $id =~ s/>//g;
	    defined $seq && $seq =~ s/>//g;
	    $has_seq = 0 unless length($seq);
	}
    }

    return $has_seq;
}
