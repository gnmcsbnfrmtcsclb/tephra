#!perl

## NB: This is used internally by Tephra, do not use it directly

use 5.014;
use strict; 
use warnings;
use Bio::SearchIO;
use File::Spec;
use File::Basename;
use List::Util          qw(min);
use File::Copy          qw(copy);
use IPC::System::Simple qw(system capture);
use Try::Tiny;
use Getopt::Long;
use Tephra::Config::Exe;
use Carp 'croak';

my $usage = "USAGE: ".basename($0)." -s seq.fas --hmmfile file.hmm -o outdir";
my $seq; 
my $phmm_file;
my $out_dir;

GetOptions(
    'seq=s'     => \$seq,
    'hmmfile=s' => \$phmm_file,
    'odir=s'    => \$out_dir,
);

if (!$seq || !$phmm_file || !$out_dir) {
    print "\n[ERROR]: Missing arguments. Check command line. Exiting.\n\n";
    print $usage, "\n";
    exit(1);
}

my $seq_file = File::Spec->catfile($out_dir, 'nucleotide_orfs.fas');       
my $pep_file = File::Spec->catfile($out_dir, 'translated_orfs.faa');
open my $out, '>', $seq_file or die "\n[ERROR]: Could not open file: $seq_file";
say $out $seq;
close $out;

my $config = Tephra::Config::Exe->new->get_config_paths;
my ($hmmbin, $transeq) = @{$config}{qw(hmmer2bin transeq)};
my $hmmsearch = File::Spec->catfile($hmmbin, 'hmmsearch');

try {
    system($transeq, "-frame=f", $seq_file, "-outseq=$pep_file", "-auto", "-trim", "yes");
}
catch {
    print "\n[ERROR]: transeq failed. Here is the exception: $_\n";
    exit;
};

my @hmm_results = capture([0..5], $hmmsearch, $phmm_file, $pep_file);
parse_hmmsearch(\@hmm_results, $pep_file);

exit;
#
# methods
#
sub parse_hmmsearch {
    my ($hmm_results, $pep_file) = @_;

    my ($name, $path, $suffix) = fileparse($pep_file, qr/\.[^.]*/);
    my $hmmout = File::Spec->catfile($path, $name.'_hmmsearch.txt');
    open my $o, '>', $hmmout or die "\n[ERROR]: Could not open file: $hmmout";;
    print $o @$hmm_results;
    close $o;

    my $hmmer_in = Bio::SearchIO->new(-file => $hmmout, -format => 'hmmer');

    my @evalues;
    while ( my $result = $hmmer_in->next_result ) {    
        while ( my $hit = $result->next_hit ) {
            my $score  = $hit->raw_score;
            my $signif = $hit->significance;
            while ( my $hsp = $hit->next_hsp ) {
                my $e_val = $hsp->evalue;
                push @evalues, $e_val;
            }
        }
    }
    my $best_hit = min(@evalues);
    print $best_hit;
    unlink $hmmout;
}
